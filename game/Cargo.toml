
[package]
name = "game"
version = "0.1.0"
edition = "2021"

[lib]
path = "src/lib.rs"
crate-type = [
    "staticlib", # for hardware
    "dylib",     # for simulator
    "rlib",      # to link with bin
]


[dependencies]
anyhow = { version = "1.0", default-features = false }
playdate = { git = "https://github.com/boozook/playdate", rev = "66da849" }
bevy_app = { version = "0.16", default-features = false, features = [] }
bevy_ecs = { version = "0.16", default-features = false, features = [] }
bevy_input = { version = "0.16", default-features = false, features = ["smol_str"] }
bevy_math = { version = "0.16", default-features = false, features = ["libm", "alloc"] }
bevy_platform = { version = "0.16", default-features = false, features = ["alloc"] }
bevy_playdate = { path = "../bevy_playdate" }
bevy_reflect = { version = "0.16", default-features = false, features = ["glam", "smol_str", "smallvec"] }
bevy_time = { version = "0.16", default-features = false }

diagnostic = { path = "../diagnostic", features = ["pd"] }
hashbrown = { version = "0.15.2", default-features = false, features = ["default-hasher"] }
itertools = { version = "0.14.0", default-features = false }
lz4_flex = { git = "https://github.com/PSeitz/lz4_flex.git", default-features = false }
tiledpd = { path = "../tiledpd" }
no_std_io2 = "0.9.0"
parry2d = { git = "https://github.com/Niashi24/parry", branch = "bevy-support", default-features = false, features = ["required-features", "alloc"] }
derive_more = { version = "2.0.1", default-features = false, features = ["full"] }
# Used only for exporting types (not needed for final builds?)
serde_json = { version = "1.0", default-features = false, features = ["alloc"] }
serde = { version = "1.0.217", default-features = false, features = ["derive", "serde_derive"] }

# Playdate Package Info
# doc: https://github.com/boozook/playdate/blob/main/support/build/README.md#metadata
# official doc: https://sdk.play.date/#pdxinfo
[package.metadata.playdate]
name = "Bouncy Bug"
author = "Niashi"
version = "0.1.0"
bundle-id = "com.niashi.bouncybug"
build-number = 363
description = "TODO: Description for the Bouncy Bug game."

#content-warning = "This game contains mild realistic, violence and bloodshed."
#content-warning2 = "Really scary game."

image-path = "img/system"
launch-sound-path = "sfx/jump"

[package.metadata.playdate.assets]
"assets/level-1-layer-(1).png" = "../assets/export/level-1-layer-(1).png"
"assets/level-1.tmb" = "../assets/export/level-1.tmb"
"assets/main-tileset.tsb" = "../assets/export/main-tileset.tsb"
"assets/square-layer-(1).png" = "../assets/export/square-layer-(1).png"
"assets/square.tmb" = "../assets/export/square.tmb"
"assets/tiles-table-16-16.png" = "../assets/export/tiles-table-16-16.png"
"assets/tiles.tsb" = "../assets/export/tiles.tsb"
"assets/tileset-table-24-24.png" = "../assets/export/tileset-table-24-24.png"
"assets/folder/tiles-copy.png" = "../assets/export/folder/tiles-copy.png"

#"img/system/" = "${PLAYDATE_SDK_PATH}/Examples/Game Template/Source/SystemAssets/*.png"
#"sfx/jump.wav" = "${PLAYDATE_SDK_PATH}/Examples/Level 1-1/Source/sfx/jump.wav"
# This is a complex way of specifying what assets should be included.
# Left hand is a path where asset should be in the package,
# Right hand is the path where source(s) should be found.

# Also this way supports simple include and exclude instructions:
# "rel-to-crate-root/file-to-include" = true   # left hand is a local path, relative to crate-root,
# "file-to-exclude" = false  # OR resulting path that where asset will be in the resulting package.

# Another way to declare assets is much simpler:
# [package.metadata.playdate]
# assets = ["assets/**/*.wav", "assets/**/*.png"]
# That means "just include all of this".


# Assets Configuration
[package.metadata.playdate.options.assets]
dependencies = true    # allow to build assets for dependencies (default is `true`)
overwrite = true       # overwrite existing (default is `true`)
method = "link"        # "copy" or "link"   (default is `link`)
follow-symlinks = true # follow symlinks    (default is `true`)
